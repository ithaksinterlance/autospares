{"version":3,"sources":["components/main.js","App.js","serviceWorker.js","index.js"],"names":["Home","lazy","Solite","Varta","Acdelco","Amaron","Brands","Services","Sell","contact","How_to_maintain_your_car_battery","How_to_know_if_your_car_battery_is_dying","Tip_to_sanitize_your_car_during_covid_19","All_you_need_to_know_about_car_battery","Top_4_battery_for_your_car","BlogSidebar","Post","report","Main","fallback","className","exact","path","component","window","location","href","App","fixedHeader","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.31b58deb.chunk.js","sourcesContent":["import React, { Suspense, lazy } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nconst Home = lazy(() => import(\"./Home\"));\r\nconst Solite = lazy(() => import(\"./Solite\"));\r\nconst Varta = lazy(() => import(\"./Varta\"));\r\nconst Acdelco = lazy(() => import(\"./Acdelco\"));\r\nconst Amaron = lazy(() => import(\"./Amaron\"));\r\nconst Brands = lazy(() => import(\"./brands\"));\r\nconst Services = lazy(() => import(\"./services\"));\r\nconst Sell = lazy(() => import(\"./sell\"));\r\nconst contact = lazy(() => import(\"./Contact\"));\r\nconst How_to_maintain_your_car_battery = lazy(() => import(\"./Blog1\"));\r\nconst How_to_know_if_your_car_battery_is_dying = lazy(() => import(\"./Blog2\"));\r\nconst Tip_to_sanitize_your_car_during_covid_19 = lazy(() => import(\"./Blog3\"));\r\nconst All_you_need_to_know_about_car_battery = lazy(() => import(\"./Blog4\"));\r\nconst Top_4_battery_for_your_car = lazy(() => import(\"./Blog5\"));\r\nconst BlogSidebar = lazy(() => import(\"./BlogSidebar\"));\r\nconst Post = lazy(() => import(\"./Post\"));\r\nconst report = lazy(() => import(\"../reportWebVitals\"))\r\n\r\nconst Main = () => (\r\n  <Suspense fallback={<div className=\"loader\"></div>}>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route\r\n        exact\r\n        path=\"/google760dbaa359091b71.html\"\r\n        component={() => {\r\n          window.location.href = \"google760dbaa359091b71.html\";\r\n          return null;\r\n        }}\r\n      />\r\n      <Route\r\n        exact\r\n        path=\"/google1a02148ea2112982.html\"\r\n        component={() => {\r\n          window.location.href = \"google1a02148ea2112982.html\";\r\n          return null;\r\n        }}\r\n      />\r\n      <Route exact path=\"/solite-battery\" component={Solite} />\r\n      <Route exact path=\"/varta-battery\" component={Varta} />\r\n      <Route exact path=\"/acdelco-battery\" component={Acdelco} />\r\n      <Route exact path=\"/amaron-battery\" component={Amaron} />\r\n      <Route exact path=\"/car-battery-brands\" component={Brands} />\r\n      <Route exact path=\"/car-battery-replacement\" component={Services} />\r\n      <Route exact path=\"/become-a-partner\" component={Sell} />\r\n      <Route exact path=\"/contact\" component={contact} />\r\n      <Route exact path=\"/BlogSidebar\" component={BlogSidebar} />\r\n      <Route exact path=\"/post\" component={Post} />\r\n      <Route exact path=\"/report\" component={report} />\r\n      <Route\r\n        exact\r\n        path=\"/how_to_maintain_your_car_battery\"\r\n        component={How_to_maintain_your_car_battery}\r\n      />\r\n      <Route\r\n        exact\r\n        path=\"/how_to_know_if_your_car_battery_is_dying\"\r\n        component={How_to_know_if_your_car_battery_is_dying}\r\n      />\r\n      <Route\r\n        exact\r\n        path=\"/tips_to_sanitize_your_car_during_covid_19\"\r\n        component={Tip_to_sanitize_your_car_during_covid_19}\r\n      />\r\n      <Route\r\n        exact\r\n        path=\"/all_you_need_to_know_about_car_battery\"\r\n        component={All_you_need_to_know_about_car_battery}\r\n      />\r\n      <Route\r\n        exact\r\n        path=\"/top_4_battery_for_your_car\"\r\n        component={Top_4_battery_for_your_car}\r\n      />\r\n    </Switch>\r\n  </Suspense>\r\n);\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/main\";\nimport { Layout, Content } from \"react-mdl\";\nimport \"react-mdl/extra/material.css\";\nimport \"react-mdl/extra/material.js\";\n\nfunction App() {\n  return (\n    <Layout fixedHeader>\n      <Content>\n        <div className=\"page-content\">\n          <Main />\n        </div>\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();"],"sourceRoot":""}